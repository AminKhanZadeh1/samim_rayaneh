// Mocks generated by Mockito 5.4.5 from annotations
// in samim_rayaneh/test/Unit/countries_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:samim_rayaneh/Core/Failures/handle_dio_error.dart' as _i6;
import 'package:samim_rayaneh/Features/Countries/Data/Repository/countries_repo_impl.dart'
    as _i7;
import 'package:samim_rayaneh/Features/Countries/Data/Source/Remote/countries_api_service.dart'
    as _i4;
import 'package:samim_rayaneh/Features/Countries/Domain/Entities/country_entity.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCountriesApiService_2 extends _i1.SmartFake
    implements _i4.CountriesApiService {
  _FakeCountriesApiService_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CountriesApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCountriesApiService extends _i1.Mock
    implements _i4.CountriesApiService {
  MockCountriesApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio =>
      (super.noSuchMethod(
            Invocation.getter(#dio),
            returnValue: _FakeDio_0(this, Invocation.getter(#dio)),
          )
          as _i2.Dio);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<Map<String, dynamic>>>>
  getCountries() =>
      (super.noSuchMethod(
            Invocation.method(#getCountries, []),
            returnValue: _i5.Future<
              _i3.Either<_i6.Failure, List<Map<String, dynamic>>>
            >.value(
              _FakeEither_1<_i6.Failure, List<Map<String, dynamic>>>(
                this,
                Invocation.method(#getCountries, []),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<Map<String, dynamic>>>>);
}

/// A class which mocks [CountriesRepoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCountriesRepoImpl extends _i1.Mock implements _i7.CountriesRepoImpl {
  MockCountriesRepoImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.CountriesApiService get apiService =>
      (super.noSuchMethod(
            Invocation.getter(#apiService),
            returnValue: _FakeCountriesApiService_2(
              this,
              Invocation.getter(#apiService),
            ),
          )
          as _i4.CountriesApiService);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i8.CountryEntity>>> getCountries() =>
      (super.noSuchMethod(
            Invocation.method(#getCountries, []),
            returnValue: _i5.Future<
              _i3.Either<_i6.Failure, List<_i8.CountryEntity>>
            >.value(
              _FakeEither_1<_i6.Failure, List<_i8.CountryEntity>>(
                this,
                Invocation.method(#getCountries, []),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i8.CountryEntity>>>);
}
